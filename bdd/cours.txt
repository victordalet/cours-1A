/*10-10*/
	// Exemple d'aplications de BDD -> Réservation ; Commandes ; réseau social...
	// BDD un seul language -> SQL
	// BDD -> Ensemble structuré et organisé permettant le stockage de grandes quantités d'informations afin d'en faciliter l'exploitation.
	// SGBD -> Logiciel destiné a stocker et a partager les informations dans une BDD, en garantissant la qualité, la pérennité et la confidentialité 		des informations, tout en mmasquant la complexité des informations.
	// position SGBD ->  Innterface utilisateur <-> SGBD <-> iterface d'éccès physique <-> BDD

	// Architecture trois niveaux d'un SGBD
		// Niveau externe (valeurs)
			// Appelé schéma externe ou vue
			// Permet de masquer la complexité de la base de données
		// Niveau conceptuel (organisation/structure)
			// Implémaentation du schéma réalisé
			// Décrit la structure des données, les contraintes et les relations
			// Dans les SGBD relationnels, il s'agit d'une vision tabulaire
		// Niveau interne (stockage sur le système de fichier)

	// Objectif SGBD
		// Indépendance physique des données -> pas d'inpacte entre différents niveaux et méthodes d'éccès transparentes pour l'user
		// Indépendance logique des données -> même ensemble de données peut être vu différemment pas des users différents
		// Accès aux données -> via un DML optimisé poru minimiser les accès disque 
		// Administration centralisée des données -> lieu commun
		// Non-redondance des données -> chaque info représentée q'une seule fois (evite prbl MAJ)
		// Cohérence des données -> contraintes d'intégrité -> définies dans le LDD et vérifié par le CRUD 
			// CRUD -> CREATE ; READ ; UPDATE ; DELETE
		// Partage des données -> pls user accès aux même données au même moment
		// Sécurité des données -> sécurité des accès ; associer a chauqe user des droites d'accès aux données
		// résistance aux passes (2 solutions) ->
			// Récupérer les données dans l'état avant modif
			// Terminer la modification

	// SQL ->
		// Language manipulation des données -> externe
		// Language définition des données   -> conceptuel
		// Language de contrôle des données  -> interne

	// SGBD (relationnel)
		// GRATUIT
			// MINI (< 200 mo)
				// SQLite (système embarqué)
			// PETITES (< 10Go)
				// MySQL
				// MariaDBg
				// SQLite
			// GRANDES 
				// PostGreSQL
		// PAYANT
			// PETITES (< 10Go)
				// Access (disponible sur Office ; sans compétence dev)
			// GRANDES
				// SQL Server
				// Oracle Database

	// Concepts des bases de données et langage SQL

	// L'entité -> Population d'individus Homogènes	
		// Exemple -> Un voilier, un étudiant, une salle , un fournisseur ...
		// Représentation ->  NOM en Majuscule encadré dans un rectangle
							   __________________
							  |      BATEAU      |
							  |__________________|

  	// Attribut ou Propriété -> caractéristique associé à une entité ou une association
  		// Un attribut est une donnée élémentaire
  		// Une entité et ses attributs doivent être cohérents
  		// Un attribut ne peut pas être partagé entre plusieurs entités ou associations
	  	// <!> Un attribut ne peut contenir qu'une seule valeur.
  		// Représentation -> 
							   __________________
							  |      BATEAU      |
							  |__________________|
							  |      taille      |
							  |      poids       |
							  |      capacite    |
							  |      couleur     |
							  |__________________|

/*24 10*/

	// Identifiant -> valeur unique pour chaque identité	
		// Chaque entité possède exactement un identifiguit, pouvant être formé de plusieurs attributs
		// Représentation -> (souligné)

							   __________________
							  |      BATEAU      |
							  |__________________|
							  | immatriculation  |
							  | _______________  |
							  |      taille      |
							  |      poids       |
							  |      capacite    |
							  |      couleur     |
							  |__________________|

  	// Association -> liaison qui a une signification précise entre plusieurs entités
  		// définis par des attributs
  		// possèdent un identifiant (facultatif dans certains cas)
  		// un attribut est placé dans une association uniquement lorsqu'il dépend de toutes les entités liées par l'association


									 __________________                
									|      PRODUIT     |      
									|__________________|
									|     	 id       |
									|        __        |   
									|       nom        |  
									|       prix       |
									|    description   |
									|      marque      |
									|__________________|
                                        _____|______
                                       (            )   
                                       (  contient  )
                                       (   ------   )
                                       (  quantité  )
                                       (____________)
                                             |
									 __________________
									|     COMMANDE     |      
									|__________________|
									|        id        |
									|        __        |   
									| moyen de payment |  
									|     adresse      |
									|  date livraison  |
									|  mode livraison  |
									|__________________|

	// Cardinalité ->
		// utilisées pour qualifier qunatitativement les associations
		// permet de préciser le nb minimal et maximal d'interventionn d'une identité sur une association
		// Exemples ->
		   -> 0,1
		   -> 0,inf
		   -> 1,1
		   -> 1,inf 	
		// Représentation -> (Modèle Conceptuel de Données (MCD))

									 __________________                
									|      BATEAU      |      
									|__________________|
									|  imatriculation  |
									|  ______________  |   
									|      taille      |  
									|      poids       |
									|     capacité     |
									|__________________|
									         | 1,n
                                        _____|______
                                       (            )   
                                       (  navigue   )
                                       (   ------   )
                                       (   poste    )
                                       (____________)
                                             | 0,1
									 ________|_________
									|      MARIN       |      
									|__________________|
									|       nom        |
									|       ___        |   
									|      prénom      |  
									|      ______      |
									|     téléphone    |
									|__________________|



/*07 11*/

	// Traduction d'un MCD en MLD

		// Dans le modèle logique, les données sont représentées par des tables.
		// L'état cohérent de la base est défini par un ensemble de contrainte d'intégrité.

		// Le passage du MCD au MLD ->
			// Entités -> table
			// transformations des relation du MCD

		// Clé primaire (repésente entité)		
			// la valeur vide NULL est interdite
			// la valeur ne peut pas changer	

		// Clé étrangère
			// la valeur Null est interdite
			// identifie une colonne d'une table référencant une colonne d'une aure table
			// Cardinalité -> 1,n = Infini ; 1,1 = Fini
				// rajoute ->  (unique)  si deux Fini
			// une assiciation binaire de type n,m devient une table supplémentaire (table de jonction) dont la cléf primaire est composée de 	la réunions des clés étrangères.
			// Représentation ->	


			 ______________
			|   Personne   |
			|______________| 
			|NoInscription |
			|              |
			|Nom           | 
			|Prénom        |                     ___________
			|#Adresse      |  <---------------> |  Adresse  |
			|______________|						   |___________|
															| IdAdresse |
															|           |
														   |Numero     |
															|Rue        |
															|Code Postal|
															|Ville      |
															|Pays       |
                                             |___________|	





/*28 11*/


	// Types de données	
	   // Numérique :
         Nombre entier : INTEGER 
         Nombres réels : FLOAT
	    // Chaîne de caractères :
			Char (taille)  1<<Taille<< 255
			VarChar (taille) 
			Text ->  ∞



	// Création de table

		create table Etudiant(nom VARCHAR(30),
		prenom VARCHAR(30),
		age INTEGER 
		PRIMARY KEY(nom,prenom)
		);

	// Supprimer une table

		DROP TABLE (nom de la table);

	// Ajouter une collone

		ALTER TABLE (table_name) ADD (name) (type);

	// Supprimer une collone

		ALTER TABLE (table_name) DROP (column);

	// Modifier une collone

		ALTER TABLE (table_name) MODIFY (column_name) (new_type);

	// Modifier le nom

		ALTER TABLE (name_table) CHANGE (old_name) (new_name) (type);

	// Modifier la clé primaire

		ALTER TABLE (table_name) DROP  primary key ;
		ALTER TABLE (table_name) ADD PRIMARY KEY (name);

	// Clés étrangères

		(name) (type) REFERENCES (table_name) ((column))

		FOREIGN KEY (names) REFERECES (table_name) ((columns))

		// exemple : 

			CREATE TABLE CLASSE (
			id INTEGER PRIMARY KEY,
			nom VARCHAR (15)
			);

			CREATE TABLE ETUDIANT(
			nom VARCHAR(35) PRIMARY KEY,
			prenom VARCHAR(35),
			age INTEGER,
			classe_id INTERGER REFERENCES CLASSE (id)
			);

		// exemple :

			CREATE TABLE CLASSE (
			id INTEGER ,
			nom VARCHAR (15),
			PRIMARY KEY (id,nom)
			);

			CREATE TABLE ETUDIANT(
			nom VARCHAR(35) PRIMARY KEY,
			prenom VARCHAR(35),
			age INTEGER,
			classe_id INTERGER, 
			classe_name VARCHAR (15),
			FOREIGN KEY (class_id,class_name) REFERENCES CLASSE (id,nom)
			);



	// Lancer mysql 
		mysql -uroot -proot

		