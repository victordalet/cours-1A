/*27-09*/	
	// instruction -> ordre simple
	// programme -> ensemble ordonnée d'instruction 
	// language de programation -> format lisse d'une présentation des instrction

	// famille de languages : -machine (processeur); -assembleur ; -évolués;
	// traduction évolué to machine  -> compilateur (traduit + enregistrer (en exécutable)) / interpréteur (traduit + exécuté)

	// Concépteur : Dennis Ritchie & Brian Kernighan
	// versions : 70-72 ; C K&R (78) -> standard ; C89/90 -> norme ; C99 -> performance ; C11 -> multithread

	// fonctionnement : fichier source (.c) -> compilation -> fichier objet (.obj) -> éditeur de liens [linker] -> fichier programme (.exe)

	// ereur :  compilation -> sytaxe ; linker -> conflit / problème de versions / manque de fichiers ; d'éxécution -> mauvais résultat

	// compilateurs : Visual C++ ; gcc ; clang (apple) ; Intel C++
	// IDE : Clion ; Xcode (mac) ; Eclipse (IBM) ; NetBeans (ORACLE) ; Codeblocks

	// bilblio base : stdio.h -> printf() ; scanf()  / stdlib.h -> rand() / time.h -> time() / math-> sin()


	/*exemple de programme d'addition*/




/*29-09*/
	// obfuscation -> technique informatique pour cacher les codes (ex : nom de variables ou fonction incropréhensible ; saut de ligne suprimer)

	// variables noms -> snake case : prix_article / camel case : prisArticle
	// signed -> + ou - ; unsigned -> +
	// short : 2oct ; int : 4oct ; long 4-8oct ; longlong 8oct ; 
	// % -> hd ; d ; ld ; lld ; hu ; u ; lu ; llu ; 
	// float : 4oct ; double : 8oct ;
	// preferer le double (%lf)
	// char (1oct) -> sert à stoquer un petit entier ; un symbole (utiliser '' ) ;
	// ascii : A->65 ; a-> 97 ; ensemble vide -> 48  

	/*exercice simulateur de crédits*/

	/*ex 2 & 3 & 5*/

	/*EX 2*/
		1) >>> 4 44 84 124 164 204 0
		2) >>> 10 1010 2010 3010 4010 5010 0
		3) Permet d'afficher la table de numération de 1 à 5, suivit du reste de la division du dernier therme du nombre a 



/*30-09*/
	// Opérateurs :
		// calculs -> + ; - ; / ; * ; % -> (detecter multiple ; isoler un chiffre ; aléatoire ...)
		// comparaison -> || ; && ; ! ; < ; > ; == ; != ; >= ; <=
		// affectation -> = ...
		// divers -> sizeof ; cast  (ex : pox(x,n/p)) ; ? : (condition ternaire)

	// isoler avec modulo : value%10 ; value/10%10 ; value/100

	// random entre 1 & 6 :       
		// srand((unsigned) time(NULL));
    	// printf("%d\n", (rand()%6)+1);

	/* EX JEU DE DEE */

	/*Valeur absolue*/
		(n < 0) ? -n: n;

/*02 10*/
	/*Exercices du 04 10*/

/*06 10*/
	// double scnaf("%c") -> scanf(" %c") ; fflush(stdin) ; fpurge(stdin) [mac]

	// Instructions de tests 
	// tests  
		// ? :    -> Une seule instruction ; else obligatoire 
		// if     -> Générale
		// switch -> Comparer une seule variable à plusieurs valeurs
			// switch (var [entier !reel]) {case v: instructions;beak; default: ...}

	/*Exemples Conditions if et switch*/


/*19 10*/
	// Instructions de boucles

	// for 
	// while
	// do while